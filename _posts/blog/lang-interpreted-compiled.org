#+TITLE:       解释型语言和编译型语言
#+AUTHOR:      congleetea
#+EMAIL:       congleetea@gmail.com
#+DATE:        2018-01-02 Tue
#+URI:         /blog/%y/%m/%d/解释型语言和编译型语言
#+KEYWORDS:    language
#+TAGS:        language
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 解释型语言和编译型语言

- 编写程序的目的就是要这些程序驱动计算机执行特定的任务。进一步就是要驱动CPU执行某些任务。因此CPU必须要
  能够理解这些代码。

- 高级语言大都不能被CPU直接理解。因此需要翻译成CPU能够理解的代码，才能驱动CPU执行。解释型语言和编译型
  语言的区别就在于什么时候解释成CPU能识别的机器代码。

- 编译型语言在运行之前需要在编译环境下变异成机器代码，这样CPU可以直接识别，运行的时候就不需要临时翻译，
  因此，这类语言执行速度就会比较快。

- 解释型语言会一句一句的运行。这些语言需要利用解释器，在运行的时候动态将代码逐句解释为机器码，或是已经
  预先编译为机器码的子程序，之后在运行。所以速度可能会慢很多。

- 目前有的语言既需要编译，也需要解释，比如java。这是因为编译过程不是直接将其编译成机器码，而是编译为一个
  中间语言，再由解释器将其解释成机器码运行。

- 由于解释器的不断优化，解释型语言的性能也在不断的提升，速度也会提升不少。

- 解释器与编译器两者各有优势：当程序需要迅速启动和执行的时候，解释器可以首先发挥作用，省去编译的时间，立
  即执行。在程序运行后，随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地代码之后，可以获取
  更高的执行效率。 当程序运行环境中内存资源限制较大（如部分嵌入式系统中），可以使用解释执行节约内存，反之
  可以使用编译执行来提升效率。
  

links:

[[http://blog.csdn.net/zhu_xun/article/details/16921413][解释型语言和编译型语言的区别]]
