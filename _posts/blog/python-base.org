#+TITLE:       python 基础
#+AUTHOR:      congleetea
#+EMAIL:       congleetea@gmail.com
#+DATE:        2018-01-05 Fri
#+URI:         /blog/%y/%m/%d/python-基础
#+KEYWORDS:    python,decorator
#+TAGS:        python,points
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: python 记录

* 解释型语言-解释器

  参考 [[https://congleetea.github.io/blog/2018/01/02/%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80/][解释型语言和编译型语言]]

* 数据类型

- 整数，浮点数，字符串，布尔，空值None，列表(索引从0开始, -N表示倒数第几个元素)，元组tuple（和list区别：初始化之后不能修改），dict/map，set。

- 变量(动态言语: 变量可以反复赋不同类型的不同值)，常量(在Python中，通常用全部大写的变量名表示常量。常量其实也是变量).

- 变量赋值(对变量赋值就是把数据和变量给关联起来)： 内存中创建值，创建指向值的变量。也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据。

- 整数运算结果永远是精确的：10/3=3, 10.0/3=3.3333333333333335

- 不可变的tuple和可变的tuple.（不变是指指向不变，可变是指向的内容可以变）

- dict相比list查找速度快，内存消耗大，用空间换时间。



* 判断循环
- if COND: 
- if CONF: else:
- if CONF: elif: else:
- for x in xs:
- while COND: 

* 函数

- 函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”。

- 如果没有return，默认为return None，返回多个值其实时tuple.

- 参数：默认参数，可变参数，关键字参数
  
- 默认参数

  def power(x, n=2): n默认为2，调用的时候可以只给一个参数x。但是注意顺序：必选参数必须在前，默认参数在后。默认参数有多个，如果需要传入的顺序不一致可以使用power(5, n=2),使用等号区分。
 
  但是默认参数必须指向不变对象，否则默认参数会记忆而出错。
 
- 可变参数 def calc(*numbers)

  numbers会接收到一个tuple.

  如果要把list和tuple放到可变参数中去，只需要在前面加上*即可。

  
- 关键字参数
  关键字参数在函数内部自动组装为一个dict。

- 参数组合

  def func(a, b, c=0, *args, **kw): a,b是普通参数，c为默认参数，args是可变参数，kw是关键字参数。

- 递归函数会导致栈溢出，所以可以使用尾递归避免这个问题。

* 切片

  对list和tuple取部分连成块的元素

  [:], [::]

* 迭代

- dict的迭代

  默认迭代key，for key in d: 

  如果要迭代value： for value in d.itervalues():

  如果要同时迭代key和value： for k,v in d.iteritems():

- list的迭代
 
  默认就是迭代值；

  如果要迭代下标：for i, value in enumerate(['A', 'B'])

* 列表推导式 list comprehensions

- [x*x for x in range(1, 11)] 计算[1*1, 2*2, ..., 10*10]

- 筛选 [x*x for x in range(1, 11) if x % 2 == 0] 对x筛选. 

- 多层循环 [m + n for m in 'ABC' for n in 'XYZ']

* 生成器 (迭代 -> 生成器 -> yield)

  通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。
  而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前
  面几个元素，那后面绝大多数元素占用的空间都白白浪费了。

  所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出
  后续的元素呢？这样就不必创建完整的list，从而节省大量的空间。在Python中， *这种一边
  循环一边计算的机制* ，称为生成器（Generator）。

  *generator保存的是算法* ，每次调用next()，就计算出下一个元素的值，直到计算到最后一个
  元素，没有更多的元素时，抛出StopIteration的错误。

  上面这种不断调用next()方法实在是太变态了，正确的方法是使用for循环，因为generator
  也是可迭代对象。

- 生成生成器的方法

  1. g = (x * x for x in range(10))

  2. 使用关键字yield： 如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通
     函数，而是一个generator。 yield类似一个return.

* 函数式编程

  Python对函数式编程提供部分支持。由于Python允许使用变量，因此，Python不是纯函数式编程语言。

- 高阶函数
  
  1. 变量可以指向函数： f=abs, f(-10)=10

  2. 函数名也是变量，是指向函数的变量。 

  3. 编写高阶函数就是让函数的参数能够接收别的函数。

  4. map()函数接收两个参数，一个是函数，一个是序列，map将传入的函数依次作用到序列的每个元素，
     并把结果作为新的list返回。和erlang中的lists:map(Fun, List)一样。

  5. reduce()把一个函数作用在一个序列[x1, x2, x3...]上，这个函数必须接收两个参数，reduce把结
     果继续和序列的下一个元素做累积计算。和erlang中的lists:foldl(Fun, Acc0, List1) -> List2。
 
  6. filter()用于过滤序列。依次对list执行Fun，返回使结果为True的list元素。 

  7. sorted()排序: 本身是一个升序排列的函数，同时也是一个高阶函数， sorted(List, Fun)可以按照
     Fun的方式进行排序.

- 函数作为返回值
 
  闭包： 参数什么时候传给定义的函数？是在执行的时候。

- 匿名函数
 
  lambda x: x*x

- 装饰器decorator(函数对象 -> 函数作为装饰器函数的参数)

  0. 这种在代码运行期间动态增加功能的方式，称之为“装饰器”（Decorator）。本质上，decorator就是
     一个返回函数的高阶函数。 

  1. 可以通过函数对象的__name__属性获取函数的名字。
 
  2. @符号使用

- 偏函数(目的是想固定住某些函数的某些参数)

  1. 当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。

  2. functools.partial的作用就是，把一个函数的某些参数给固定住（也就是设置默认值），返回一个新的函数，调用这个新函数会更简单。

     
* 模块（复杂代码的组织结构， code -> module -> package: 避免模块冲突 -> package.module）

  1. 每个package下面必须有__init__.py文件。这个文件必须存在，否则python会把这个目录当做普通目录，而不是一个package。
    
  2. __init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是目录名。 

  3. 当我们在命令行运行某个模块文件时，Python解释器把一个特殊变量__name__置为__main__，而如果在其他地方导入该模块时，
     if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。 

    #+BEGIN_SRC python
    if __name__=='__main__':
        test()
    #+END_SRC

  4. 别名：import mod as mod1

  5. 作用域(变量和函数)：public(abc, x123, PI)；特殊变量(__xxx__，我们自己定义的通常不这样)；private(_xxx, __xxx)　

  6. 模块的路径搜索
 
     当前目录，所有已安装的内置模块，第三方模块，搜索路径存放在sys模块的path变量中。
 
     使用sys.path.append('YOUR_PATH')添加，暂时的。

     设置环境变量PYTHONPATH。


* 面向对象编程OOP(事物共同点抽象-> 对象(属性，方法) -> 差异性)

  在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。

  定义类其实是定义了一种数据类型。

  数据封装、继承和多态是面向对象的三大特点。
 
  1. 封装 

     封装就是把变量属性和方法整合起来作为这个类.

     在类中定义的函数第一个参数一定时self，初始化方法def __init__(self, args)， 有了init，创建对象的时候就要在类后面加上args的值。

     访问限制：class中的某些内部属性不想被外部代码访问(特别是修改), 名称前面加上__, 只有类的内部可以访问。如果要获取，那就定义类里面的方法来获取。
     __xx__在类中时可以直接访问的.

     可以给一个实例动态绑定一个属性和方法。

  2. 继承（抽象的共性）和多态（抽象的特性）
    
     对一个已经抽象的事物(base class)进一步抽象(subclass)，增加不同于原来抽象的新的信息。 class SubClass(BaseClass)。
   
     "开闭原则"：　对类的扩展开放，对修改封闭。
    
  3. 获取对象信息
     
     type()

     isinstance()

     dir()

     hasattr(obj), getattr(obj), setattr(obj)

* 面向对象高级编程

  1. 通过 __slots__ 限制属性和方法的创建：前面提到可以给一个实例动态绑定一个属性和方法。为了限制随意绑定方法和属性，使用__slots__ = ('a', 'b'),　
     除此之外其他不能绑定。对子类无效，除非子类也定义了，那子类的属性就是父类和子类的和。

  2. 在外面直接给实例绑定属性不会进行类型检查，这样不合理。因此可以通过类中的函数来设置或者获取属性。这种方法会复杂一点。
     
     *如果要既能检查参数类型，又可以用类似属性这样简单的方式访问类的变量* 就好了。通过@property装饰器将方法变成属性，就可以像使用属性一样使用方法。

  3. 多重继承
     
     class ClassName(Class1Name, Class2Name)
    
  4. 定制类

     __str__
 
     __iter__

     __getitem__

     __getattr__
  
     __call__

     
  5. 使用元类


* 错误处理,调试，测试

  - 错误处理
    
    捕捉错误：　try ... except ... finally...

    抛出错误：　 raise  


  - 调试
  　
  　断言 assert : assert n != 0, 'n is zero!'

* 进程和线程


  
* links:

- [[http://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html][Python关键字yield和生成器的解释]]

- [[https://foofish.net/python-decorator.html][理解 Python 装饰器]]

  装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。
