#+TITLE:       《Linux内核实现》笔记
#+AUTHOR:      congleetea
#+EMAIL:       congleetea@gmail.com
#+DATE:        2017-11-07 Tue
#+URI:         /blog/%y/%m/%d/《linux内核实现》笔记
#+KEYWORDS:    linux,kernel,internet
#+TAGS:        internet,lines 
#+LANGUAGE:    en
#+OPTIONS:     H:3 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: 读书笔记

* linux

** 内核态和用户态

都是程序，但是内核空间的程序具有访问受保护内存空间和硬件设备的所有权限。

运用程序在用户空间，只能访问部分系统资源，并且只使用某些特定的系统功能。不能直接访问硬件，也不能访问划分给别人（包括内核空间的和其他用户）的内存。

用户空间的运用程序通过调用内核空间的接口可以间接获取系统的资源。当执行内核的接口时程序处于内核态，结束之后返回用户态。就这样在内核态和用户态之间切换。

运用程序通过系统调用来与内核通信。运用程序通常调用 *库函数* 再 *由库函数通过系统调用* 界面，让内核代其完成各种不同的任务。

库函数调用内核只是其中一个操作，但是有的操作基本就是直接调用内核的，比如open()。当一个运用程序执行一条系统调用，我们就说 *内核正在代其执行任务* 。也可以说
运用程序通过系统调用再内核空间运行，而内核被称为运行于进程上下文中。

内核还负责管理系统的硬件设备，这需要用到中断机制。当硬件设备想和系统设备通信的时候，它首先要发出一个异步的中断信号去打断处理器的执行，进而打断内核的执行。

中断对应一个中断号，内核通过这个终端号查找相应的中断服务程序。调用这个程序响应和处理中断。

** 操作系统的但内核和微内核 

- 这里的单核微内核不是硬件上的单核多核。   
- 操作系统阵营分为但内核和微内核。
- 所谓但内核就是吧它从整体上作为一个单独的大过程来实现，同时也运行在一个单独的地址空间上。因此，这样的内核通常以单个静态二进制文件的形式存放于磁盘中。所有的内核服务都在这样的额一个大内核地址空间上运行。内核之间的通信时微不足道的，因为大家都运行在内核态，并身处同一地址空间：内核可以直接调用函数，这与用户空间运用程序没有什么区别。这种模式的支持者认为单模块具有简单和性能高的特点。大多数Unix系统都设置为单模块。
- 微内核则不作为一个单独的大过程来实现，相反，微内核的功能被划分成多个独立的过程，每个过程叫做一个服务器。理想情况下，只有强烈请求特权服务的服务器才会运行在特权模式下，其他服务器都运行在用户空间。不过，所有的服务器都保持独立并运行在各自的地址空间上。因此，就不可能像单模块内核那样直接调用函数，而是通过消息传递处理微内核通信：系统采用进程间通信（IPC）机制，因此，各个服务器之间通过IPC机制互通消息，互换"服务"。服务器的各自独立有效避免了一个服务器的失效祸及另一个。同样，模块化的系统允许一个服务器为了另一个服务器而换出。
- 因为IPC机制的开销多于函数调用，又因为会涉及内核空间与用户控件的上下文切换，因此，消息传递需要一定的周期，而但内核中简单的函数调用没有这些开销。结果，所有实际运用的给予微内核的系统都让大部分或者全部服务器位于内核，这样就可以直接调用函数，消除频繁的上下文切换。
- Linux是一个但内核，也就是说，Linux内核运行在单独的内核地址空间上。不过，Linux汲取了微内核的精华：其引以为傲的是模块化设计、抢占式内核、支持内核线程以及动态状态内核模块的能力。不仅如此，Linux还避其微内核设计上性能损失的缺陷，让所有事情都运行在内核态，直接调用函数，无需消息传递。至今，Linux是模块化的、多线程的以及内核本身可调度的操作系统，实用主义再次占了上方。 

* 进程管理

Linux内核如何管理每个进程：他们在内核中如何被列举，如何创建，最终如何消亡。拥有操作系统就是为了运行用户程序，因此，进程管理就是所有操作系统的心脏所在。

- 进程就是处于执行期的程序（目标码放在某种存储介质上）。
- 执行线程（简称线程thread）, 是在进程中活动的对象。每个线程都拥有一个独立的程序计数器、进程棧和一组进程寄存器。内核调度的对象是线程，而不是进程。Linux系统的
线程实现非常特别：它对线程和进程不特别区分。（其实本质上线程和进程只是共享的数据不一样而已。） 
- 进程提供两种虚拟机制：虚拟处理器和虚拟内存。他们都给进程一种假象，好像这些进程都在使用整个处理器或者内存，值得注意的是，线程之间可以共享虚拟内存，但是每个都拥有各自的虚拟处理器。
- 进程（又叫任务）-> 任务队列（内核存放进程的双向链表），每一项都包含进程的所有信息，成为进程描述符(task_struct)。进程描述符中包含的数据能完整地描述一个正在执行的任务：他打开的文件，进程的地址空间，挂起的信号，进程的状态，还有其他更多信息。
- 通过预先分配和重复使用task_struct，可以避免动态分配和释放所带来的资源消耗。我想预分配应该都是这个作用。
