#+TITLE: 2016-05-20-EMQTTD_hook_dis_connected.org
#+AUTHOR: Xuancong Lee 
#+EMAIL:  congleetea@gmail.com
#+DATE:  Friday, May 20 2016 
#+OPTIONS: ^:nil
 
** Problem 
 出现异常断开连接之后,不会触发disconnected的hook.

** Pre
首先要搞清楚connected和disconnected的hook在什么时候会被触发.
在代码中查找发现两个hook都是在emqttd_protocol.erl中触发的:
#+BEGIN_SRC
    
process(Packet = ?CONNECT_PACKET(Var), State0) ->

    #mqtt_packet_connect{proto_ver  = ProtoVer,
                         proto_name = ProtoName,
                         username   = Username,
                         password   = Password,
                         clean_sess = CleanSess,
                         keep_alive = KeepAlive,
                         client_id  = ClientId} = Var,

    State1 = State0#proto_state{proto_ver  = ProtoVer,
                                proto_name = ProtoName,
                                username   = Username,
                                client_id  = ClientId,
                                clean_sess = CleanSess,
                                keepalive  = KeepAlive,
                                will_msg   = willmsg(Var),
                                connected_at = os:timestamp()},

    trace(recv, Packet, State1),

    {ReturnCode1, SessPresent, State3} =
    case validate_connect(Var, State1) of
        ?CONNACK_ACCEPT ->
            case emqttd_access_control:auth(client(State1), Password) of
                ok ->
                    %% Generate clientId if null
                    State2 = maybe_set_clientid(State1),

                    %% Start session
                    case emqttd_sm:start_session(CleanSess, clientid(State2)) of
                        {ok, Session, SP} ->
                            %% Register the client
                            emqttd_cm:register(client(State2)),       %% (1)
                            %% Start keepalive
                            start_keepalive(KeepAlive),
                            %% ACCEPT
                            {?CONNACK_ACCEPT, SP, State2#proto_state{session = Session}};
                        {error, Error} ->
                            exit({shutdown, Error})
                    end;
                {error, Reason}->
                    ?LOG(warning, "Username '~s' login failed for ~p", [Username, Reason], State1),
                    {?CONNACK_CREDENTIALS, false, State1}
            end;
        ReturnCode ->
            {ReturnCode, false, State1}
    end,
    %% Run hooks
    emqttd:run_hooks('client.connected', [ReturnCode1], client(State3)),  %% (2)
    %% Send connack
    send(?CONNACK_PACKET(ReturnCode1, sp(SessPresent)), State3);

#+END_SRC

上面是emqttd中唯一一处触发connected的hook的地方, 我们看到在(1)中对clientid进行了注册, 也就是将相关信息
写进了进程字典中.完成这些connected的初步操作之后, 在(2) 中执行client.connected的hook.

可以看到对于上线来说,基本上不会出错.

下面看disconnected的触发:
#+BEGIN_SRC

shutdown(Error, State = #proto_state{client_id = ClientId, will_msg = WillMsg}) ->
    ?LOG(info, "Shutdown for ~p", [Error], State),
    send_willmsg(ClientId, WillMsg),
    lager:error("~p:~p:Run disconnected.hook ClientId=~p~n", [?MODULE, ?LINE, ClientId]),
    emqttd:run_hooks('client.disconnected', [Error], ClientId),
    %% let it down
    %% emqttd_cm:unregister(ClientId).
    ok.

#+END_SRC

这里也是唯一的触发disconnected的hook的地方, emqttd_protocol属于连接层的, 因此如果在其他更高层, 
比如session层发生了异常退出, 这个就检测不到,当然也就不会触发disconnected的hook.
